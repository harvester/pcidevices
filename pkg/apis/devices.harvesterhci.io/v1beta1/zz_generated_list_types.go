/*
Copyright 2022 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=devices.harvesterhci.io
package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// NodeList is a list of Node resources
type NodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Node `json:"items"`
}

func NewNode(namespace, name string, obj Node) *Node {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("Node").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// PCIDeviceList is a list of PCIDevice resources
type PCIDeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []PCIDevice `json:"items"`
}

func NewPCIDevice(namespace, name string, obj PCIDevice) *PCIDevice {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("PCIDevice").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// PCIDeviceClaimList is a list of PCIDeviceClaim resources
type PCIDeviceClaimList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []PCIDeviceClaim `json:"items"`
}

func NewPCIDeviceClaim(namespace, name string, obj PCIDeviceClaim) *PCIDeviceClaim {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("PCIDeviceClaim").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SRIOVGPUDeviceList is a list of SRIOVGPUDevice resources
type SRIOVGPUDeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []SRIOVGPUDevice `json:"items"`
}

func NewSRIOVGPUDevice(namespace, name string, obj SRIOVGPUDevice) *SRIOVGPUDevice {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("SRIOVGPUDevice").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SRIOVNetworkDeviceList is a list of SRIOVNetworkDevice resources
type SRIOVNetworkDeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []SRIOVNetworkDevice `json:"items"`
}

func NewSRIOVNetworkDevice(namespace, name string, obj SRIOVNetworkDevice) *SRIOVNetworkDevice {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("SRIOVNetworkDevice").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VGPUDeviceList is a list of VGPUDevice resources
type VGPUDeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []VGPUDevice `json:"items"`
}

func NewVGPUDevice(namespace, name string, obj VGPUDevice) *VGPUDevice {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("VGPUDevice").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}
