/*
Copyright 2022 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	v1beta1 "github.com/harvester/pcidevices/pkg/apis/devices.harvesterhci.io/v1beta1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type VGPUDeviceHandler func(string, *v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error)

type VGPUDeviceController interface {
	generic.ControllerMeta
	VGPUDeviceClient

	OnChange(ctx context.Context, name string, sync VGPUDeviceHandler)
	OnRemove(ctx context.Context, name string, sync VGPUDeviceHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() VGPUDeviceCache
}

type VGPUDeviceClient interface {
	Create(*v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error)
	Update(*v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error)
	UpdateStatus(*v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1beta1.VGPUDevice, error)
	List(opts metav1.ListOptions) (*v1beta1.VGPUDeviceList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.VGPUDevice, err error)
}

type VGPUDeviceCache interface {
	Get(name string) (*v1beta1.VGPUDevice, error)
	List(selector labels.Selector) ([]*v1beta1.VGPUDevice, error)

	AddIndexer(indexName string, indexer VGPUDeviceIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.VGPUDevice, error)
}

type VGPUDeviceIndexer func(obj *v1beta1.VGPUDevice) ([]string, error)

type vGPUDeviceController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewVGPUDeviceController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) VGPUDeviceController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &vGPUDeviceController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromVGPUDeviceHandlerToHandler(sync VGPUDeviceHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.VGPUDevice
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.VGPUDevice))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *vGPUDeviceController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.VGPUDevice))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateVGPUDeviceDeepCopyOnChange(client VGPUDeviceClient, obj *v1beta1.VGPUDevice, handler func(obj *v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error)) (*v1beta1.VGPUDevice, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *vGPUDeviceController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *vGPUDeviceController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *vGPUDeviceController) OnChange(ctx context.Context, name string, sync VGPUDeviceHandler) {
	c.AddGenericHandler(ctx, name, FromVGPUDeviceHandlerToHandler(sync))
}

func (c *vGPUDeviceController) OnRemove(ctx context.Context, name string, sync VGPUDeviceHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromVGPUDeviceHandlerToHandler(sync)))
}

func (c *vGPUDeviceController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *vGPUDeviceController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *vGPUDeviceController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *vGPUDeviceController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *vGPUDeviceController) Cache() VGPUDeviceCache {
	return &vGPUDeviceCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *vGPUDeviceController) Create(obj *v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error) {
	result := &v1beta1.VGPUDevice{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *vGPUDeviceController) Update(obj *v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error) {
	result := &v1beta1.VGPUDevice{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *vGPUDeviceController) UpdateStatus(obj *v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error) {
	result := &v1beta1.VGPUDevice{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *vGPUDeviceController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *vGPUDeviceController) Get(name string, options metav1.GetOptions) (*v1beta1.VGPUDevice, error) {
	result := &v1beta1.VGPUDevice{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *vGPUDeviceController) List(opts metav1.ListOptions) (*v1beta1.VGPUDeviceList, error) {
	result := &v1beta1.VGPUDeviceList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *vGPUDeviceController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *vGPUDeviceController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1.VGPUDevice, error) {
	result := &v1beta1.VGPUDevice{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type vGPUDeviceCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *vGPUDeviceCache) Get(name string) (*v1beta1.VGPUDevice, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1beta1.VGPUDevice), nil
}

func (c *vGPUDeviceCache) List(selector labels.Selector) (ret []*v1beta1.VGPUDevice, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VGPUDevice))
	})

	return ret, err
}

func (c *vGPUDeviceCache) AddIndexer(indexName string, indexer VGPUDeviceIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.VGPUDevice))
		},
	}))
}

func (c *vGPUDeviceCache) GetByIndex(indexName, key string) (result []*v1beta1.VGPUDevice, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1beta1.VGPUDevice, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.VGPUDevice))
	}
	return result, nil
}

type VGPUDeviceStatusHandler func(obj *v1beta1.VGPUDevice, status v1beta1.VGPUDeviceStatus) (v1beta1.VGPUDeviceStatus, error)

type VGPUDeviceGeneratingHandler func(obj *v1beta1.VGPUDevice, status v1beta1.VGPUDeviceStatus) ([]runtime.Object, v1beta1.VGPUDeviceStatus, error)

func RegisterVGPUDeviceStatusHandler(ctx context.Context, controller VGPUDeviceController, condition condition.Cond, name string, handler VGPUDeviceStatusHandler) {
	statusHandler := &vGPUDeviceStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromVGPUDeviceHandlerToHandler(statusHandler.sync))
}

func RegisterVGPUDeviceGeneratingHandler(ctx context.Context, controller VGPUDeviceController, apply apply.Apply,
	condition condition.Cond, name string, handler VGPUDeviceGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &vGPUDeviceGeneratingHandler{
		VGPUDeviceGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterVGPUDeviceStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type vGPUDeviceStatusHandler struct {
	client    VGPUDeviceClient
	condition condition.Cond
	handler   VGPUDeviceStatusHandler
}

func (a *vGPUDeviceStatusHandler) sync(key string, obj *v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type vGPUDeviceGeneratingHandler struct {
	VGPUDeviceGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *vGPUDeviceGeneratingHandler) Remove(key string, obj *v1beta1.VGPUDevice) (*v1beta1.VGPUDevice, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1beta1.VGPUDevice{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *vGPUDeviceGeneratingHandler) Handle(obj *v1beta1.VGPUDevice, status v1beta1.VGPUDeviceStatus) (v1beta1.VGPUDeviceStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.VGPUDeviceGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
